
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  image: 'image',
  address: 'address',
  phone: 'phone',
  otpCode: 'otpCode',
  otpExpires: 'otpExpires',
  resetToken: 'resetToken',
  resetTokenExpires: 'resetTokenExpires',
  isVerified: 'isVerified',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  providerType: 'providerType',
  providerId: 'providerId',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.DonationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  status: 'status',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PdfBookScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  price: 'price',
  pdfUrl: 'pdfUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PdfOrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  pdfBookId: 'pdfBookId',
  quantity: 'quantity',
  totalPrice: 'totalPrice',
  status: 'status',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  referenceId: 'referenceId',
  provider: 'provider',
  amount: 'amount',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NewsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  titleEn: 'titleEn',
  slug: 'slug',
  excerpt: 'excerpt',
  image: 'image',
  category: 'category',
  date: 'date',
  readTime: 'readTime',
  views: 'views',
  featured: 'featured',
  content: 'content',
  tags: 'tags',
  author: 'author',
  authorId: 'authorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GopalPariwarScalarFieldEnum = {
  id: 'id',
  heroImage: 'heroImage',
  heroTitle: 'heroTitle',
  heroSubtitle: 'heroSubtitle',
  personalInfo: 'personalInfo',
  spiritualEducation: 'spiritualEducation',
  lifeJourney: 'lifeJourney',
  responsibilities: 'responsibilities',
  pledges: 'pledges',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GaushalaScalarFieldEnum = {
  id: 'id',
  name: 'name',
  photo: 'photo',
  address: 'address',
  establishmentYear: 'establishmentYear',
  contactDetails: 'contactDetails',
  totalCows: 'totalCows',
  capacity: 'capacity',
  description: 'description',
  city: 'city',
  state: 'state',
  pincode: 'pincode',
  contactPerson: 'contactPerson',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CardScalarFieldEnum = {
  id: 'id',
  title: 'title',
  titleEn: 'titleEn',
  link: 'link',
  image: 'image',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DtaSanssthanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  person: 'person',
  image: 'image',
  description: 'description',
  email: 'email',
  phone: 'phone',
  altPhone: 'altPhone',
  website: 'website',
  timing: 'timing',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PrivacyPolicyScalarFieldEnum = {
  id: 'id',
  title: 'title',
  subtitle: 'subtitle',
  sections: 'sections',
  email: 'email',
  phone: 'phone',
  callingHours: 'callingHours',
  mailingAddress: 'mailingAddress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TermsConditionsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  subtitle: 'subtitle',
  sections: 'sections',
  email: 'email',
  phone: 'phone',
  callingHours: 'callingHours',
  mailingAddress: 'mailingAddress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BannerScalarFieldEnum = {
  id: 'id',
  title: 'title',
  image: 'image',
  active: 'active',
  order: 'order',
  publicId: 'publicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  info: 'info',
  createdAt: 'createdAt'
};

exports.Prisma.FoundationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  tagline: 'tagline',
  logoUrl: 'logoUrl',
  description: 'description',
  establishedYear: 'establishedYear',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.FoundationStatScalarFieldEnum = {
  id: 'id',
  foundationId: 'foundationId',
  label: 'label',
  value: 'value',
  displayOrder: 'displayOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FoundationActivityScalarFieldEnum = {
  id: 'id',
  foundationId: 'foundationId',
  activityText: 'activityText',
  displayOrder: 'displayOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FoundationObjectiveScalarFieldEnum = {
  id: 'id',
  foundationId: 'foundationId',
  title: 'title',
  description: 'description',
  objectiveType: 'objectiveType',
  displayOrder: 'displayOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FoundationContactScalarFieldEnum = {
  id: 'id',
  foundationId: 'foundationId',
  email: 'email',
  phone: 'phone',
  address: 'address',
  website: 'website',
  socialMediaLinks: 'socialMediaLinks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FoundationMediaScalarFieldEnum = {
  id: 'id',
  foundationId: 'foundationId',
  fileName: 'fileName',
  filePath: 'filePath',
  fileType: 'fileType',
  fileSize: 'fileSize',
  mediaType: 'mediaType',
  altText: 'altText',
  createdAt: 'createdAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  startDate: 'startDate',
  endDate: 'endDate',
  time: 'time',
  location: 'location',
  duration: 'duration',
  color: 'color',
  liveLinks: 'liveLinks',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BhajanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  artist: 'artist',
  album: 'album',
  duration: 'duration',
  imageUrl: 'imageUrl',
  audioUrl: 'audioUrl',
  audioPath: 'audioPath',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  password: 'password',
  image: 'image',
  address: 'address',
  phone: 'phone',
  otpCode: 'otpCode',
  resetToken: 'resetToken',
  role: 'role'
};

exports.Prisma.AccountOrderByRelevanceFieldEnum = {
  providerType: 'providerType',
  providerId: 'providerId',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  sessionToken: 'sessionToken'
};

exports.Prisma.DonationOrderByRelevanceFieldEnum = {
  status: 'status',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId'
};

exports.Prisma.PdfBookOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  pdfUrl: 'pdfUrl'
};

exports.Prisma.PdfOrderOrderByRelevanceFieldEnum = {
  status: 'status',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  referenceId: 'referenceId',
  provider: 'provider',
  status: 'status'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NewsOrderByRelevanceFieldEnum = {
  title: 'title',
  titleEn: 'titleEn',
  slug: 'slug',
  excerpt: 'excerpt',
  image: 'image',
  category: 'category',
  date: 'date',
  readTime: 'readTime',
  author: 'author'
};

exports.Prisma.GopalPariwarOrderByRelevanceFieldEnum = {
  heroImage: 'heroImage',
  heroTitle: 'heroTitle',
  heroSubtitle: 'heroSubtitle',
  spiritualEducation: 'spiritualEducation'
};

exports.Prisma.GaushalaOrderByRelevanceFieldEnum = {
  name: 'name',
  photo: 'photo',
  address: 'address',
  contactDetails: 'contactDetails',
  description: 'description',
  city: 'city',
  state: 'state',
  pincode: 'pincode',
  contactPerson: 'contactPerson'
};

exports.Prisma.CardOrderByRelevanceFieldEnum = {
  title: 'title',
  titleEn: 'titleEn',
  link: 'link',
  image: 'image'
};

exports.Prisma.DtaSanssthanOrderByRelevanceFieldEnum = {
  name: 'name',
  person: 'person',
  image: 'image',
  description: 'description',
  email: 'email',
  phone: 'phone',
  altPhone: 'altPhone',
  website: 'website',
  timing: 'timing'
};

exports.Prisma.PrivacyPolicyOrderByRelevanceFieldEnum = {
  title: 'title',
  subtitle: 'subtitle',
  email: 'email',
  phone: 'phone',
  callingHours: 'callingHours',
  mailingAddress: 'mailingAddress'
};

exports.Prisma.TermsConditionsOrderByRelevanceFieldEnum = {
  title: 'title',
  subtitle: 'subtitle',
  email: 'email',
  phone: 'phone',
  callingHours: 'callingHours',
  mailingAddress: 'mailingAddress'
};

exports.Prisma.BannerOrderByRelevanceFieldEnum = {
  title: 'title',
  image: 'image',
  publicId: 'publicId'
};

exports.Prisma.MessageOrderByRelevanceFieldEnum = {
  info: 'info'
};

exports.Prisma.FoundationOrderByRelevanceFieldEnum = {
  name: 'name',
  tagline: 'tagline',
  logoUrl: 'logoUrl',
  description: 'description',
  establishedYear: 'establishedYear'
};

exports.Prisma.FoundationStatOrderByRelevanceFieldEnum = {
  label: 'label',
  value: 'value'
};

exports.Prisma.FoundationActivityOrderByRelevanceFieldEnum = {
  activityText: 'activityText'
};

exports.Prisma.FoundationObjectiveOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description'
};

exports.Prisma.FoundationContactOrderByRelevanceFieldEnum = {
  email: 'email',
  phone: 'phone',
  address: 'address',
  website: 'website'
};

exports.Prisma.FoundationMediaOrderByRelevanceFieldEnum = {
  fileName: 'fileName',
  filePath: 'filePath',
  fileType: 'fileType',
  altText: 'altText'
};

exports.Prisma.EventOrderByRelevanceFieldEnum = {
  title: 'title',
  time: 'time',
  location: 'location',
  duration: 'duration',
  color: 'color',
  description: 'description'
};

exports.Prisma.BhajanOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  artist: 'artist',
  album: 'album',
  duration: 'duration',
  imageUrl: 'imageUrl',
  audioUrl: 'audioUrl',
  audioPath: 'audioPath'
};
exports.ObjectiveType = exports.$Enums.ObjectiveType = {
  main: 'main',
  supportive: 'supportive'
};

exports.MediaType = exports.$Enums.MediaType = {
  logo: 'logo',
  banner: 'banner',
  gallery: 'gallery',
  document: 'document'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  Donation: 'Donation',
  PdfBook: 'PdfBook',
  PdfOrder: 'PdfOrder',
  Payment: 'Payment',
  News: 'News',
  GopalPariwar: 'GopalPariwar',
  Gaushala: 'Gaushala',
  Card: 'Card',
  DtaSanssthan: 'DtaSanssthan',
  PrivacyPolicy: 'PrivacyPolicy',
  TermsConditions: 'TermsConditions',
  Banner: 'Banner',
  Message: 'Message',
  Foundation: 'Foundation',
  FoundationStat: 'FoundationStat',
  FoundationActivity: 'FoundationActivity',
  FoundationObjective: 'FoundationObjective',
  FoundationContact: 'FoundationContact',
  FoundationMedia: 'FoundationMedia',
  Event: 'Event',
  Bhajan: 'Bhajan'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
