generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//////////////////////////////
// USERS & AUTHENTICATION
//////////////////////////////

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String?  
  image      String?
  address    String?
  phone      String?
  otpCode           String?
  otpExpires        DateTime?
  resetToken        String?
  resetTokenExpires DateTime?
  isVerified        Boolean   @default(false)
  role       String    @default("user") // user | subadmin | admin
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  donations  Donation[]
  pdfOrders  PdfOrder[]
  accounts   Account[]
  sessions   Session[]
  payments   Payment[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  providerType      String
  providerId        String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@index([providerId, providerAccountId], name: "provider_idx")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

//////////////////////////////
// DONATIONS
//////////////////////////////

model Donation {
  id            Int      @id @default(autoincrement())
  userId        Int
  amount        Float
  status        String   @default("pending") // pending | success | failed
  paymentMethod String? // phonepe | stripe | etc.
  transactionId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

//////////////////////////////
// PDF BOOKS & ORDERS
//////////////////////////////

model PdfBook {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  price       Float
  pdfUrl      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders PdfOrder[]
}

model PdfOrder {
  id            Int      @id @default(autoincrement())
  userId        Int
  pdfBookId     Int
  quantity      Int      @default(1)
  totalPrice    Float
  status        String   @default("pending") // pending | paid | failed | refunded
  paymentMethod String?
  transactionId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  pdfBook PdfBook @relation(fields: [pdfBookId], references: [id])
}

//////////////////////////////
// PAYMENT LOGS
//////////////////////////////

model Payment {
  id          Int      @id @default(autoincrement())
  userId      Int
  referenceId String
  provider    String
  amount      Float
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

//////////////////////////////
// NEWS
//////////////////////////////

model News {
  id            Int      @id @default(autoincrement())
  title         String
  titleEn       String?
  slug          String   @unique
  featuredImage String?
  authorName    String?
  authorAvatar  String?
  authorRole    String?
  publishedDate String?
  readTime      String?
  views         String?
  category      String?
  tags          String?  // store as comma-separated values
  content       Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

//////////////////////////////
// GOPAL PARIWAR
//////////////////////////////

model GopalPariwar {
  id                  Int      @id @default(autoincrement())
  heroImage           String
  heroTitle           String
  heroSubtitle        String
  personalInfo        Json
  spiritualEducation  String?
  lifeJourney         Json
  responsibilities    Json
  pledges             Json
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

//////////////////////////////
// GAUSHALA
//////////////////////////////

model Gaushala {
  id             Int      @id @default(autoincrement())
  name           String
  photo          String?
  address        String
  establishmentYear Int
  contactDetails String
  totalCows      Int
  capacity       Int
  description    String?
  city           String
  state          String
  pincode        String
  contactPerson  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
//////////////////////////////
// CARDS
//////////////////////////////

model Card {
  id          Int      @id @default(autoincrement())
  title       String   // Hindi title
  titleEn     String?  // English title
  link        String   // URL or internal link
  image       String?  // Optional image for the card
  order       Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
//////////////////////////////
// DATA SANSTHAN / ORGANIZATION
//////////////////////////////

model DtaSanssthan {
  id          Int      @id @default(autoincrement())
  name        String
  person    String?
  image       String?   // optional logo or representative image
  description String?
  email       String?
  phone       String?
  altPhone    String?
  website     String?
  timing      String?   // working hours / schedule
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
//////////////////////////////
// PRIVACY POLICY
//////////////////////////////

model PrivacyPolicy {
  id            Int      @id @default(autoincrement())
  title         String
  subtitle      String?
  sections      Json      // Array of sections { title: String, content: String }
  email         String?
  phone         String?
  callingHours  String?    // e.g., "10:00 AM - 6:00 PM"
  mailingAddress String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
//////////////////////////////
// TERMS AND CONDITIONS
//////////////////////////////

model TermsConditions {
  id            Int      @id @default(autoincrement())
  title         String
  subtitle      String?
  sections      Json      // Array of sections { title: String, content: String }
  email         String?
  phone         String?
  callingHours  String?    // e.g., "10:00 AM - 6:00 PM"
  mailingAddress String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
//////////////////////////////
// BANNERS
//////////////////////////////

model Banner {
  id       Int    @id @default(autoincrement())
  title     String
  image     String
  active    Boolean  @default(false)
  order     Int
  publicId  String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Message{
  id Int @id @default(autoincrement())
  info String
  createdAt DateTime @default (now()) 
}



model Foundation {
  id              Int       @id @default(autoincrement())
  name            String
  tagline         String?
  logoUrl         String?   @map("logo_url")
  description     String?   @db.Text
  establishedYear String?   @map("established_year")
  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  createdById     Int?      @map("created_by_id")
  updatedById     Int?      @map("updated_by_id")

  stats              FoundationStat[]
  activities         FoundationActivity[]
  objectives         FoundationObjective[]
  contact            FoundationContact?
  media              FoundationMedia[]

  @@map("foundations")
}

model FoundationStat {
  id           Int        @id @default(autoincrement())
  foundationId Int        @map("foundation_id")
  label        String
  value        String
  displayOrder Int        @default(0) @map("display_order")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  foundation   Foundation @relation(fields: [foundationId], references: [id], onDelete: Cascade)

  @@map("foundation_stats")
}

model FoundationActivity {
  id           Int        @id @default(autoincrement())
  foundationId Int        @map("foundation_id")
  activityText String     @map("activity_text") @db.Text
  displayOrder Int        @default(0) @map("display_order")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  foundation   Foundation @relation(fields: [foundationId], references: [id], onDelete: Cascade)

  @@map("foundation_activities")
}

enum ObjectiveType {
  main
  supportive
}

model FoundationObjective {
  id            Int           @id @default(autoincrement())
  foundationId  Int           @map("foundation_id")
  title         String
  description   String?        @db.Text 
  objectiveType ObjectiveType @default(main) @map("objective_type")
  displayOrder  Int           @default(0) @map("display_order")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  foundation    Foundation    @relation(fields: [foundationId], references: [id], onDelete: Cascade)

  @@map("foundation_objectives")
}

model FoundationContact {
  id              Int        @id @default(autoincrement())
  foundationId    Int        @unique @map("foundation_id")
  email           String?
  phone           String?
  address         String?    @db.Text
  website         String?
  socialMediaLinks Json?     @map("social_media_links")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")

  foundation      Foundation @relation(fields: [foundationId], references: [id], onDelete: Cascade)

  @@map("foundation_contacts")
}

enum UserRole {
  super_admin
  admin
  editor
}



enum MediaType {
  logo
  banner
  gallery
  document
}

model FoundationMedia {
  id           Int        @id @default(autoincrement())
  foundationId Int?       @map("foundation_id")
  fileName     String     @map("file_name")
  filePath     String     @map("file_path")
  fileType     String?    @map("file_type")
  fileSize     Int?       @map("file_size")
  mediaType    MediaType  @default(gallery) @map("media_type")
  altText      String?    @map("alt_text")
  createdAt    DateTime   @default(now()) @map("created_at")

  foundation   Foundation? @relation(fields: [foundationId], references: [id], onDelete: Cascade)

  @@map("foundation_media")
}
model Event {
  id          Int      @id @default(autoincrement())
  title       String
  startDate   DateTime
  endDate     DateTime
  time        String?
  location    String
  duration    String   // e.g., "5 दिवसीय", "1 दिवसीय"
  color       String   @default("from-orange-500 to-red-500")
  liveLinks   Json?  
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([endDate])
}