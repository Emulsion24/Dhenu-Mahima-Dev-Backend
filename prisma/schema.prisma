generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//////////////////////////////
// USERS & AUTHENTICATION
//////////////////////////////

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String?  
  image      String?
  address    String?
  phone      String?
  otpCode           String?
  otpExpires        DateTime?
  resetToken        String?
  resetTokenExpires DateTime?
  isVerified        Boolean   @default(false)
  role       String    @default("user") // user | subadmin | admin
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt


  bookOrders    BookOrder[]
  bookPurchases BookPurchase[]
  donations  Donation[]
  payments   Payment[]
}




//////////////////////////////
// DONATIONS
//////////////////////////////

model Donation {
  id            Int      @id @default(autoincrement())
  userId        Int
  amount        Float
  status        String   @default("pending") // pending | success | failed
  paymentMethod String? // phonepe | stripe | etc.
  transactionId String  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

//////////////////////////////
// PDF BOOKS & ORDERS
//////////////////////////////

// Book Model - Stores PDF book information
model Book {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  author      String   @db.VarChar(255)
  fileName    String   @db.VarChar(255)   // Stored PDF filename
  filePath    String   @db.VarChar(500)   // Server path to PDF
  fileSize    String   @db.VarChar(50)    // e.g., "2.5 MB"
  price       Float    @db.Double
  description String?  @db.Text
  coverImage  String?  @db.VarChar(255)   // Cover image filename
  uploadDate  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  purchases   BookPurchase[]
  orderItems  BookOrderItem[]

  @@map("books")
  @@index([name])
  @@index([author])
}

// Coupon Model - Discount codes
model BookCoupon {
  id          Int      @id @default(autoincrement())
  code        String   @unique @db.VarChar(50)
  discount    Float    @db.Double
  type        String   @db.VarChar(20)    // "PERCENTAGE" or "FIXED"
  description String?  @db.Text
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders BookOrder[]

  @@map("book_coupons")
  @@index([code])
  @@index([active])
}

// Order Model - Payment orders
model BookOrder {
  id              Int      @id @default(autoincrement())
  userId          Int
  totalAmount     Float    @db.Double
  discountAmount  Float    @default(0) @db.Double
  finalAmount     Float    @db.Double
  couponId        Int?
  paymentId       String?  @db.VarChar(255)  // Razorpay payment ID
  orderId         String?  @db.VarChar(255)  // Razorpay order ID
  status          String   @default("PENDING") @db.VarChar(20) // PENDING | COMPLETED | FAILED | REFUNDED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupon    BookCoupon?     @relation(fields: [couponId], references: [id], onDelete: SetNull)
  items     BookOrderItem[]
  purchases BookPurchase[]

  @@map("book_orders")
  @@index([userId])
  @@index([status])
  @@index([orderId])
}

// Order Items - Books in each order
model BookOrderItem {
  id       Int   @id @default(autoincrement())
  orderId  Int
  bookId   Int
  price    Float @db.Double

  order BookOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book  Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("book_order_items")
  @@index([orderId])
  @@index([bookId])
}

// Purchase Model - User's purchased books (Access Control)
model BookPurchase {
  id            Int      @id @default(autoincrement())
  userId        Int
  bookId        Int
  orderId       Int
  purchaseDate  DateTime @default(now())
  accessGranted Boolean  @default(true)

  user  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  book  Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  order BookOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@map("book_purchases")
  @@index([userId])
  @@index([bookId])
  @@index([accessGranted])
}


//////////////////////////////
// PAYMENT LOGS
//////////////////////////////

model Payment {
  id          Int      @id @default(autoincrement())
  userId      Int
  referenceId String
  provider    String
  amount      Float
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

//////////////////////////////
// NEWS
//////////////////////////////

model News {
  id          Int           @id @default(autoincrement())
  title       String
  titleEn     String
  slug        String        @unique
  excerpt     String
  image       String
  category    String
  date        String
  readTime    String
  views       Int           @default(0)
  featured    Boolean       @default(false)
  content     Json
  tags        Json
  author      String       
  authorId    Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([category])
  @@index([featured])
  @@index([slug])
}



//////////////////////////////
// GOPAL PARIWAR
//////////////////////////////

model GopalPariwar {
  id                  Int      @id @default(autoincrement())
  heroImage           String
  heroTitle           String
  heroSubtitle        String
  personalInfo        Json
  spiritualEducation  String?
  lifeJourney         Json
  responsibilities    Json
  pledges             Json
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

//////////////////////////////
// GAUSHALA
//////////////////////////////

model Gaushala {
  id             Int      @id @default(autoincrement())
  name           String
  photo          String?
  address        String
  establishmentYear Int
  contactDetails String
  totalCows      Int
  capacity       Int
  description    String?
  city           String
  state          String
  pincode        String
  contactPerson  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
//////////////////////////////
// CARDS
//////////////////////////////

model Card {
  id          Int      @id @default(autoincrement())
  title       String   // Hindi title
  titleEn     String?  // English title
  link        String   // URL or internal link
  image       String?  // Optional image for the card
  order       Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
//////////////////////////////
// DATA SANSTHAN / ORGANIZATION
//////////////////////////////

model DtaSanssthan {
  id          Int      @id @default(autoincrement())
  name        String
  person    String?
  image       String?   // optional logo or representative image
  description String?
  email       String?
  phone       String?
  altPhone    String?
  website     String?
  timing      String?   // working hours / schedule
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
//////////////////////////////
// PRIVACY POLICY
//////////////////////////////

model PrivacyPolicy {
  id            Int      @id @default(autoincrement())
  title         String
  subtitle      String?
  sections      Json      // Array of sections { title: String, content: String }
  email         String?
  phone         String?
  callingHours  String?    // e.g., "10:00 AM - 6:00 PM"
  mailingAddress String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
//////////////////////////////
// TERMS AND CONDITIONS
//////////////////////////////

model TermsConditions {
  id            Int      @id @default(autoincrement())
  title         String
  subtitle      String?
  sections      Json      // Array of sections { title: String, content: String }
  email         String?
  phone         String?
  callingHours  String?    // e.g., "10:00 AM - 6:00 PM"
  mailingAddress String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
//////////////////////////////
// BANNERS
//////////////////////////////

model Banner {
  id       Int    @id @default(autoincrement())
  title     String
  image     String
  active    Boolean  @default(false)
  order     Int
  publicId  String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Message{
  id Int @id @default(autoincrement())
  info String
  createdAt DateTime @default (now()) 
}



model Foundation {
  id              Int       @id @default(autoincrement())
  name            String
  tagline         String?
  logoUrl         String?   @map("logo_url")
  description     String?   @db.Text
  establishedYear String?   @map("established_year")
  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  createdById     Int?      @map("created_by_id")
  updatedById     Int?      @map("updated_by_id")

  stats              FoundationStat[]
  activities         FoundationActivity[]
  objectives         FoundationObjective[]
  contact            FoundationContact?
  media              FoundationMedia[]

  @@map("foundations")
}

model FoundationStat {
  id           Int        @id @default(autoincrement())
  foundationId Int        @map("foundation_id")
  label        String
  value        String
  displayOrder Int        @default(0) @map("display_order")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  foundation   Foundation @relation(fields: [foundationId], references: [id], onDelete: Cascade)

  @@map("foundation_stats")
}

model FoundationActivity {
  id           Int        @id @default(autoincrement())
  foundationId Int        @map("foundation_id")
  activityText String     @map("activity_text") @db.Text
  displayOrder Int        @default(0) @map("display_order")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  foundation   Foundation @relation(fields: [foundationId], references: [id], onDelete: Cascade)

  @@map("foundation_activities")
}

enum ObjectiveType {
  main
  supportive
}

model FoundationObjective {
  id            Int           @id @default(autoincrement())
  foundationId  Int           @map("foundation_id")
  title         String
  description   String?        @db.Text 
  objectiveType ObjectiveType @default(main) @map("objective_type")
  displayOrder  Int           @default(0) @map("display_order")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  foundation    Foundation    @relation(fields: [foundationId], references: [id], onDelete: Cascade)

  @@map("foundation_objectives")
}

model FoundationContact {
  id              Int        @id @default(autoincrement())
  foundationId    Int        @unique @map("foundation_id")
  email           String?
  phone           String?
  address         String?    @db.Text
  website         String?
  socialMediaLinks Json?     @map("social_media_links")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")

  foundation      Foundation @relation(fields: [foundationId], references: [id], onDelete: Cascade)

  @@map("foundation_contacts")
}

enum UserRole {
  super_admin
  admin
  editor
}



enum MediaType {
  logo
  banner
  gallery
  document
}

model FoundationMedia {
  id           Int        @id @default(autoincrement())
  foundationId Int?       @map("foundation_id")
  fileName     String     @map("file_name")
  filePath     String     @map("file_path")
  fileType     String?    @map("file_type")
  fileSize     Int?       @map("file_size")
  mediaType    MediaType  @default(gallery) @map("media_type")
  altText      String?    @map("alt_text")
  createdAt    DateTime   @default(now()) @map("created_at")

  foundation   Foundation? @relation(fields: [foundationId], references: [id], onDelete: Cascade)

  @@map("foundation_media")
}
model Event {
  id          Int      @id @default(autoincrement())
  title       String
  startDate   DateTime
  endDate     DateTime
  time        String?
  location    String
  duration    String   // e.g., "5 दिवसीय", "1 दिवसीय"
  color       String   @default("from-orange-500 to-red-500")
  liveLinks   Json?  
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([endDate])
}

model Bhajan {
  id          String   @id @default(uuid())
  name        String
  artist      String
  album       String?
  duration    String   @default("0:00")
  imageUrl    String?
  audioUrl    String
  audioPath   String   // Server file path
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
  @@index([artist])
}

model Category {
  id        Int              @id @default(autoincrement())
  name      String           @unique @db.VarChar(100)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // ✅ One-to-many relation with Gaumatabhajan
  gaumatabhajans   Gaumatabhajan[]

  @@map("categories")
}

model Gaumatabhajan {
  id          String    @id @default(uuid())
  name        String
  artist      String
  album       String?
  duration    String    @default("0:00")
  imageUrl    String?
  audioUrl    String
  audioPath   String
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name])
  @@index([artist])
  @@index([categoryId])
}
